// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package logging

var _ = OptionsOptionDeclareWithDefault()

type Options struct {
	level            string
	encodeing        string
	outputPaths      []string
	errorOutputPaths []string
	encoderConfig    map[string]string
	development      bool
	name             string
	logerrLevel      int
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithLevel(v string) Option {
	return func(cc *Options) Option {
		previous := cc.level
		cc.level = v
		return WithLevel(previous)
	}
}

func WithEncodeing(v string) Option {
	return func(cc *Options) Option {
		previous := cc.encodeing
		cc.encodeing = v
		return WithEncodeing(previous)
	}
}

func WithOutputPaths(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.outputPaths
		cc.outputPaths = v
		return WithOutputPaths(previous...)
	}
}

func WithErrorOutputPaths(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.errorOutputPaths
		cc.errorOutputPaths = v
		return WithErrorOutputPaths(previous...)
	}
}

func WithEncoderConfig(v map[string]string) Option {
	return func(cc *Options) Option {
		previous := cc.encoderConfig
		cc.encoderConfig = v
		return WithEncoderConfig(previous)
	}
}

func WithDevelopment(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.development
		cc.development = v
		return WithDevelopment(previous)
	}
}

func WithName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.name
		cc.name = v
		return WithName(previous)
	}
}

func WithLogerrLevel(v int) Option {
	return func(cc *Options) Option {
		previous := cc.logerrLevel
		cc.logerrLevel = v
		return WithLogerrLevel(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithLevel("debug"),
		WithEncodeing("json"),
		WithOutputPaths([]string{""}...),
		WithErrorOutputPaths([]string{"stderr"}...),
		WithEncoderConfig(map[string]string{"messageKey": "message", "levelKey": "level", "levelEncoder": "lowercase"}),
		WithDevelopment(true),
		WithName(""),
		WithLogerrLevel(1),
	} {
		_ = opt(cc)
	}

	return cc
}
